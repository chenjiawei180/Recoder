C51 COMPILER V9.00   ADC                                                                   11/28/2015 19:12:37 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN adc.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Recoder\adc.c LARGE BROWSE INCDIR(.\Recoder) DEBUG OBJECTEXTEND PRINT(.\adc
                    -.lst) TABS(2) OBJECT(adc.obj)

line level    source

   1          #include "adc.h"
   2          #include "usart.h"
   3          #include "wch372.h"
   4          #include "pcm1801.h"
   5          uint16_t sum_adc_value = 0;
   6          uint8_t  tel_state = 2;
   7          unsigned char pre_adc_temp= 0;
   8          uint8_t  pre_tel_state = 2;
   9          unsigned char RingDetectFlag = 0;
  10          unsigned char PreRingDetectFlag = 0;
  11          unsigned char RingUpFlag = 0;
  12          unsigned char tel_status_count = 0;
  13          void InitADC()
  14          {
  15   1        P1ASF = 0x03;                   //Open 8 channels ADC function
  16   1        ADC_RES = 0;                    //Clear previous result
  17   1        ADC_CONTR = ADC_POWER | ADC_SPEEDLL;
  18   1        Delay(2);                       //ADC power-on and delay
  19   1      }
  20          
  21          unsigned char GetADCResult(BYTE ch)
  22          {
  23   1        ADC_CONTR = ADC_POWER | ADC_SPEEDLL | ch | ADC_START;
  24   1        _nop_();                        //Must wait before inquiry
  25   1        _nop_();
  26   1        _nop_();
  27   1        _nop_();
  28   1        while (!(ADC_CONTR & ADC_FLAG));//Wait complete flag
  29   1        ADC_CONTR &= ~ADC_FLAG;         //Close ADC
  30   1      
  31   1        return ADC_RES;                 //Return ADC result
  32   1      }
  33          
  34          void Delay(WORD n)
  35          {
  36   1        WORD x;
  37   1      
  38   1        while (n--)
  39   1        {
  40   2          x = 5000;
  41   2          while (x--);
  42   2        }
  43   1      }
  44          
  45          unsigned char GetADCResult_av(BYTE ch)
  46          {
  47   1        unsigned char temp = 0, value = 0, i = 0;
  48   1        unsigned char RingupLowlevel = 0;
  49   1        unsigned char RingUpFlagTime = 0;
  50   1        for (i = 0; i<16; i++)
  51   1        {
  52   2          value = GetADCResult(ch);
  53   2      #ifdef DEBUG1
                  uart_printf("value=%d \r\n", (unsigned int)value);
C51 COMPILER V9.00   ADC                                                                   11/28/2015 19:12:37 PAGE 2   

              #endif
  56   2      //sjz start
  57   2          if (value < 5)
  58   2          {
  59   3            RingupLowlevel = 1;
  60   3          }
  61   2          else if ((RingupLowlevel == 1) && (value >50))
  62   2          {
  63   3            RingUpFlagTime++;
  64   3            RingupLowlevel = 0;
  65   3          }
  66   2          if (RingUpFlagTime >= 2)
  67   2          {
  68   3            RingUpFlag = 1;
  69   3          }
  70   2          else
  71   2          {
  72   3            RingUpFlag = 0;
  73   3          }
  74   2      //sjz end
  75   2          sum_adc_value += value;
  76   2        }
  77   1      #ifdef DEBUG1
                uart_printf("RingUpFlag=%d \r\n", (unsigned int)RingUpFlag);
              #endif
  80   1        temp = (unsigned char)(sum_adc_value >> 4);
  81   1        sum_adc_value = 0;
  82   1        return temp;
  83   1      }
  84          
  85          
  86          void tel_state_process(void) //1 挂机   2无线路  3摘机  
  87          {
  88   1        unsigned char adc_temp = 0;
  89   1        adc_temp = GetADCResult_av(0);
  90   1        //uart_printf("pre_adc_temp =%d \r\n", (unsigned int)pre_adc_temp);
  91   1        //uart_printf("adc_temp =%d \r\n", (unsigned int)adc_temp);
  92   1      //if (tel_state != pre_tel_state)
  93   1        //  if (((pre_adc_temp > 200) && (adc_temp<40) && (pre_tel_state == 1) && (tel_state == 1)) || 
  94   1        //    ((pre_adc_temp <40) && (adc_temp>200) && (pre_tel_state == 3) && (tel_state == 3)))
  95   1          if (((pre_adc_temp > 200) && (adc_temp<40)) || 
  96   1        ((pre_adc_temp <40) && (adc_temp>200)))
  97   1        {
  98   2          RingDetectFlag = 1;
  99   2        }
 100   1        //uart_printf("RingDetectFlag =%d \r\n", (unsigned int)RingDetectFlag);
 101   1        //if(RingDetectFlag == 1){
 102   1        if(P41 == 1){
 103   2        if((adc_temp > 200)&&(pre_adc_temp>180))
 104   2        {
 105   3          tel_state = 1;
 106   3          //pre_adc_temp = adc_temp;
 107   3          tel_status_count++;
 108   3        }
 109   2        else if (adc_temp < 3)
 110   2        {
 111   3          if ((pre_tel_state !=1) && (pre_tel_state != 3))
 112   3          {
 113   4            tel_state = 2;
 114   4          }
 115   3          else
 116   3          {
C51 COMPILER V9.00   ADC                                                                   11/28/2015 19:12:37 PAGE 3   

 117   4            RingDetectFlag = 1;
 118   4          }
 119   3          //pre_adc_temp = adc_temp;
 120   3          tel_status_count++;
 121   3        }
 122   2        else if ((adc_temp >20 && adc_temp < 40)&&(pre_adc_temp>5))
 123   2        {
 124   3          tel_state = 3;
 125   3          
 126   3          tel_status_count++;
 127   3        }
 128   2        pre_adc_temp = adc_temp;
 129   2      //}
 130   2      }
 131   1        if(P41 ==0)
 132   1        {
 133   2          RingDetectFlag = 1;
 134   2        }
 135   1        if((RingDetectFlag == 1))
 136   1        {
 137   2          wch372_send2byte(0xA1, 0x01, 0x04);
 138   2          PreRingDetectFlag= RingDetectFlag;
 139   2          if(P41 ==1)
 140   2            RingDetectFlag = 0;
 141   2      #ifdef DEBUG
 142   2          uart_printf("the telephone is Ring \r\n");
 143   2      #endif
 144   2        }
 145   1        else
 146   1        {
 147   2      
 148   2          if(P41 == 1)
 149   2          {
 150   3          //uart_printf("pre_tel_state =%d \r\n", (unsigned int)pre_tel_state);
 151   3          //uart_printf("tel_state =%d \r\n", (unsigned int)tel_state);
 152   3          if ((tel_state != pre_tel_state)||((tel_state ==2) &&(pre_tel_state ==2))||(RingDetectFlag==0))
 153   3          {
 154   4            //if(tel_status_count >=3)
 155   4            {
 156   5            wch372_send2byte(0xA1, 0x01, tel_state);
 157   5            
 158   5      #ifdef DEBUG
 159   5            if(tel_state ==1)
 160   5               uart_printf("the telephone is offline \r\n");
 161   5            else if (tel_state == 2)
 162   5              uart_printf("no telephone \r\n");
 163   5            else if (tel_state == 3)
 164   5              uart_printf("the telephone is online \r\n");
 165   5      #endif
 166   5           }
 167   4           
 168   4          }
 169   3         }
 170   2          pre_tel_state = tel_state;
 171   2        }
 172   1      #if 0
                else if (adc_temp > 200 && tel_state != 1 && P41 == 1 && RingUpFlag !=1)
                {
                  wch372_send2byte(0xA1, 0x01, 0x01);
                  tel_state = 1;
                  pre_tel_state = tel_state;
              #ifdef DEBUG
C51 COMPILER V9.00   ADC                                                                   11/28/2015 19:12:37 PAGE 4   

                  uart_printf("the telephone is offline \r\n");
              #endif
                }
                else if (adc_temp < 10 && tel_state != 2 && P41 == 1 && RingUpFlag != 1)
                {
                  wch372_send2byte(0xA1, 0x01, 0x02);
                  tel_state = 2;
                  pre_tel_state = tel_state;
              #ifdef DEBUG
                   uart_printf("no telephone \r\n");
              #endif
                }
                else if (adc_temp >20 && adc_temp < 40 && tel_state != 3 && P41 == 1 && RingUpFlag != 1)
                {
                  wch372_send2byte(0xA1, 0x01, 0x03);
                  tel_state = 3;
                  pre_tel_state = tel_state;
              #ifdef DEBUG
                  uart_printf("the telephone is online \r\n");
              #endif
                }
              #endif
 201   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    444    ----
   CONSTANT SIZE    =     96    ----
   XDATA SIZE       =      9       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
