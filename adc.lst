C51 COMPILER V9.00   ADC                                                                   11/29/2015 12:42:33 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN adc.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Recoder\adc.c LARGE BROWSE INCDIR(.\Recoder) DEBUG OBJECTEXTEND PRINT(.\adc
                    -.lst) TABS(2) OBJECT(adc.obj)

line level    source

   1          #include "adc.h"
   2          #include "usart.h"
   3          #include "wch372.h"
   4          #include "pcm1801.h"
   5          #include "wch372.h"
   6          
   7          
   8          uint16_t sum_adc_value = 0;
   9          uint8_t  tel_state = 2;
  10          unsigned char pre_adc_temp= 0;
  11          uint8_t  pre_tel_state = 2;
  12          unsigned char RingDetectFlag = 0;
  13          unsigned char PreRingDetectFlag = 0;
  14          unsigned char RingUpFlag = 0;
  15          unsigned char tel_status_count = 0;
  16          unsigned char tel_status_1_flag =0;
  17          unsigned char re_send_status_to_pc = 0;
  18          void InitADC()
  19          {
  20   1        P1ASF = 0x03;                   //Open 8 channels ADC function
  21   1        ADC_RES = 0;                    //Clear previous result
  22   1        ADC_CONTR = ADC_POWER | ADC_SPEEDLL;
  23   1        Delay(2);                       //ADC power-on and delay
  24   1      }
  25          
  26          unsigned char GetADCResult(BYTE ch)
  27          {
  28   1        ADC_CONTR = ADC_POWER | ADC_SPEEDLL | ch | ADC_START;
  29   1        _nop_();                        //Must wait before inquiry
  30   1        _nop_();
  31   1        _nop_();
  32   1        _nop_();
  33   1        while (!(ADC_CONTR & ADC_FLAG));//Wait complete flag
  34   1        ADC_CONTR &= ~ADC_FLAG;         //Close ADC
  35   1      
  36   1        return ADC_RES;                 //Return ADC result
  37   1      }
  38          
  39          void Delay(WORD n)
  40          {
  41   1        WORD x;
  42   1      
  43   1        while (n--)
  44   1        {
  45   2          x = 5000;
  46   2          while (x--);
  47   2        }
  48   1      }
  49          
  50          unsigned char GetADCResult_av(BYTE ch)
  51          {
  52   1        unsigned char temp = 0, value = 0, i = 0;
  53   1        unsigned char RingupLowlevel = 0;
  54   1        unsigned char RingUpFlagTime = 0;
C51 COMPILER V9.00   ADC                                                                   11/29/2015 12:42:33 PAGE 2   

  55   1        for (i = 0; i<16; i++)
  56   1        {
  57   2          value = GetADCResult(ch);
  58   2      #ifdef DEBUG1
                  uart_printf("value=%d \r\n", (unsigned int)value);
              #endif
  61   2      //sjz start
  62   2          if (value < 5)
  63   2          {
  64   3            RingupLowlevel = 1;
  65   3          }
  66   2          else if ((RingupLowlevel == 1) && (value >50))
  67   2          {
  68   3            RingUpFlagTime++;
  69   3            RingupLowlevel = 0;
  70   3          }
  71   2          if (RingUpFlagTime >= 2)
  72   2          {
  73   3            RingUpFlag = 1;
  74   3          }
  75   2          else
  76   2          {
  77   3            RingUpFlag = 0;
  78   3          }
  79   2      //sjz end
  80   2          sum_adc_value += value;
  81   2        }
  82   1      #ifdef DEBUG1
                uart_printf("RingUpFlag=%d \r\n", (unsigned int)RingUpFlag);
              #endif
  85   1        temp = (unsigned char)(sum_adc_value >> 4);
  86   1        sum_adc_value = 0;
  87   1        return temp;
  88   1      }
  89          
  90          
  91          void tel_state_process(void) //1 挂机   2无线路  3摘机  
  92          {
  93   1        unsigned char adc_temp = 0;
  94   1        adc_temp = GetADCResult_av(0);
  95   1        //uart_printf("pre_adc_temp =%d \r\n", (unsigned int)pre_adc_temp);
  96   1        //uart_printf("adc_temp =%d \r\n", (unsigned int)adc_temp);
  97   1          if (((pre_adc_temp > 200) && (adc_temp<40)) ||((pre_adc_temp <40) && (adc_temp>200)))
  98   1        {
  99   2          RingDetectFlag = 1;
 100   2          tel_status_1_flag = 0;
 101   2        }
 102   1        //uart_printf("RingDetectFlag =%d \r\n", (unsigned int)RingDetectFlag);
 103   1        //if(RingDetectFlag == 1){
 104   1        if(P41 == 1){
 105   2          
 106   2        if((adc_temp > 200)&&(pre_adc_temp>180))
 107   2        {
 108   3          tel_state = 1;
 109   3          //pre_adc_temp = adc_temp;
 110   3          tel_status_count++;
 111   3        }
 112   2        else if (adc_temp < 3)
 113   2        {
 114   3          tel_status_1_flag= 0;
 115   3          if ((pre_tel_state !=1) && (pre_tel_state != 3))
 116   3          {
C51 COMPILER V9.00   ADC                                                                   11/29/2015 12:42:33 PAGE 3   

 117   4            tel_state = 2;
 118   4          }
 119   3          else
 120   3          {
 121   4            RingDetectFlag = 1;
 122   4          }
 123   3          //pre_adc_temp = adc_temp;
 124   3          tel_status_count++;
 125   3        }
 126   2        else if ((adc_temp >20 && adc_temp < 40)&&(pre_adc_temp>5))
 127   2        {
 128   3          tel_state = 3;
 129   3          tel_status_1_flag=0;
 130   3          tel_status_count++;
 131   3        }
 132   2        pre_adc_temp = adc_temp;
 133   2      //}
 134   2      }
 135   1        if(P41 ==0)
 136   1        {
 137   2          tel_status_1_flag = 0;
 138   2          RingDetectFlag = 1;
 139   2        }
 140   1        else
 141   1        {
 142   2          RingDetectFlag = 0;
 143   2          PreRingDetectFlag = 0;
 144   2        }
 145   1        //uart_printf("RingDetectFlag =%d \r\n",(unsigned int)RingDetectFlag);
 146   1        //uart_printf("PreRingDetectFlag =%d \r\n",(unsigned int)PreRingDetectFlag);
 147   1        if((RingDetectFlag == 1))
 148   1        {
 149   2          if(PreRingDetectFlag != RingDetectFlag)
 150   2          {
 151   3      #ifdef DEBUG
 152   3          uart_printf("the telephone is Ring \r\n");
 153   3      #endif
 154   3            wch372_send2byte(0xA1, 0x01, 0x04);
 155   3          }
 156   2          PreRingDetectFlag = RingDetectFlag;
 157   2        }
 158   1        else
 159   1        {
 160   2      
 161   2          if(P41 == 1)
 162   2          {
 163   3          //uart_printf("pre_tel_state =%d \r\n", (unsigned int)pre_tel_state);
 164   3          //uart_printf("tel_state =%d \r\n", (unsigned int)tel_state);
 165   3            if ((tel_state != pre_tel_state) || ((tel_state == 2) && (pre_tel_state == 2))||(re_send_status_to_pc =
             -=1))//||(RingDetectFlag==0))
 166   3          {
 167   4            //if(tel_status_count >=3)
 168   4            {
 169   5              if ((tel_status_1_flag>10) && (re_send_status_to_pc == 1))
 170   5              {
 171   6                wch372_send2byte(0xA1, 0x01, 0x05); //make sure shut down the phone truely when PC request re send th
             -e phone status
 172   6              }
 173   5              else
 174   5              {
 175   6                wch372_send2byte(0xA1, 0x01, tel_state);
 176   6              }
C51 COMPILER V9.00   ADC                                                                   11/29/2015 12:42:33 PAGE 4   

 177   5              if (re_send_status_to_pc == 1)
 178   5              {
 179   6                re_send_status_to_pc = 0;
 180   6              }
 181   5            
 182   5      #ifdef DEBUG
 183   5            if(tel_state ==1)
 184   5            {
 185   6               uart_printf("the telephone is offline \r\n");
 186   6              //ch372_init();
 187   6            }
 188   5            else if (tel_state == 2)
 189   5              uart_printf("no telephone \r\n");
 190   5            else if (tel_state == 3)
 191   5              uart_printf("the telephone is online \r\n");
 192   5      #endif
 193   5           }
 194   4           
 195   4          }
 196   3          if((tel_state ==1)&&(pre_tel_state==1)&&(RingDetectFlag ==0) &&(RingDetectFlag ==0)&&(tel_status_1_flag<
             -=20))
 197   3          {
 198   4            
 199   4            if (tel_status_1_flag>10)
 200   4            {
 201   5              pc_request_voice_data = 0;
 202   5              wch372_send2byte(0xA1, 0x01, 0x05); //make sure shut down the phone truely
 203   5            }
 204   4            else
 205   4            {
 206   5              wch372_send2byte(0xA1, 0x01, tel_state);
 207   5            }
 208   4            uart_printf("the telephone is offline \r\n");
 209   4            tel_status_1_flag ++;
 210   4            //ch372_init();
 211   4          }
 212   3         }
 213   2         pre_tel_state = tel_state;
 214   2         
 215   2        }
 216   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    590    ----
   CONSTANT SIZE    =     96    ----
   XDATA SIZE       =     11       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
