C51 COMPILER V9.00   PCM1801                                                               11/28/2015 22:06:00 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE PCM1801
OBJECT MODULE PLACED IN pcm1801.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Recoder\pcm1801.c LARGE BROWSE INCDIR(.\Recoder) DEBUG OBJECTEXTEND PRINT(.
                    -\pcm1801.lst) TABS(2) OBJECT(pcm1801.obj)

line level    source

   1          #include "pcm1801.h"
   2          #include "wch372.h"
   3          #include "usart.h"
   4          
   5          uint16_t val = 0;
   6          uint16_t value = 0;
   7          uint8_t spi_c = 0;
   8          
   9          uint16_t ring_num = 0;
  10          uint8_t  ring_table = 0;
  11          uint8_t  ring = 0;
  12          void spi_isr() interrupt 9 using 1     //SPI interrupt routine 9 (004BH)
  13          {
  14   1        SPSTAT = SPIF | WCOL;       //clear SPI status
  15   1      
  16   1      #ifdef MASTER
  17   1        // SPISS = 1;                  //push high slave SS
  18   1        if (spi_c == 0) // 第一次读取数据
  19   1        {
  20   2          value |= SPDAT << 8;
  21   2      
  22   2      //    ch372_wr_cmd_port(CMD_WR_USB_DATA7);//单片机向ch372写入向usb写入数据的命令//
  23   2      //    ch372_wr_dat_port(2);//告诉pc数据长度//
  24   2      //    ch372_wr_dat_port(value >> 8);//pc机验证数据的正确性//
  25   2      //    ch372_wr_dat_port(value);
  26   2        }
  27   1      #else                           //for salve (receive SPI data from master and
                SPDAT = SPDAT;              //           send previous SPI data to master)
              #endif
  30   1      
  31   1        if (spi_c == 1)
  32   1        {
  33   2          value |= SPDAT;
  34   2          SPDAT = 0x55;
  35   2          spi_c = 0;  
  36   2          //ch372_wr_cmd_port(CMD_WR_USB_DATA7);//单片机向ch372写入向usb写入数据的命令//
  37   2          //ch372_wr_dat_port(2);//告诉pc数据长度//
  38   2          //ch372_wr_dat_port(value >> 8);//pc机验证数据的正确性//
  39   2          //ch372_wr_dat_port(value);
  40   2        }
  41   1      }
  42          
  43          
  44          void Init_Timer()
  45          {
  46   1        TMOD = 0x22;             //???0,1???2
  47   1        AUXR |= 0x80;          //
  48   1        AUXR |= 0x40;
  49   1        TH0 = 245;
  50   1        TH1 = 252;
  51   1      
  52   1        WAKE_CLKO = WAKE_CLKO | 0X03;    //
  53   1        EA = 1;     //?????
  54   1      
C51 COMPILER V9.00   PCM1801                                                               11/28/2015 22:06:00 PAGE 2   

  55   1        //???????
  56   1        TR1 = 1;
  57   1        //ET0=1;
  58   1      }
  59          
  60          void Init_pca()
  61          {
  62   1        CMOD = 0x02;         //   ??????????PCA FOSC / 2
  63   1        //   ??PCA???????
  64   1        CCON = 0x00;             //  ??PCA?????
  65   1        //   PCA???????
  66   1        //   ??CF???
  67   1        //    ??????????
  68   1        //   ??PCA???
  69   1        CL = 0;
  70   1        CH = 0;
  71   1        CCAPM0 = 0x49;      //  PCA??0???16??????
  72   1        val = T128KHz;
  73   1        CCAP0L = val;
  74   1        CCAP0H = val >> 8;    //   ??PCA??0
  75   1        val += T128KHz;
  76   1        EA = 1;
  77   1        CR = 1;         //  PCA???????
  78   1      }
  79          
  80          void PCA_isr() interrupt 7 using 1
  81          {
  82   1        
  83   1        CCF0 = 0x00;                    //   ??????
  84   1        CCAP0L = val;
  85   1        CCAP0H = val >> 8;    //   ??PCA??0
  86   1        val += T128KHz;
  87   1        L3 = ~L3;
  88   1      
  89   1        // SPISS = 0; 
  90   1        //pull low slave SS
  91   1        //    if(line_up ==1)
  92   1        {
  93   2          spi_c = 1;
  94   2          value = 0;
  95   2          SPDAT = 0x55;                //trigger SPI send
  96   2        }
  97   1        // SPISS = 1;                  //push high slave SS
  98   1      }
  99          
 100          void InitSPI()
 101          {
 102   1        SPDAT = 0;                  //initial SPI data
 103   1        SPSTAT = SPIF | WCOL;       //clear SPI status
 104   1      #ifdef MASTER
 105   1        SPCTL = SPEN | MSTR | SPDH | CPOL | CPHA;        //master mode
 106   1      #else
                SPCTL = SPEN;               //slave mode
              #endif
 109   1      }
 110          
 111          void PCM1801_Init()
 112          {
 113   1        Init_Timer();
 114   1        Init_pca();
 115   1        InitSPI();
 116   1        IE2 |= ESPI;
C51 COMPILER V9.00   PCM1801                                                               11/28/2015 22:06:00 PAGE 3   

 117   1      }
 118          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    225    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      9    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
